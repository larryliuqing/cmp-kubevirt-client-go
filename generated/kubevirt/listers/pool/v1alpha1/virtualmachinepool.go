/*
Copyright 2023 The KubeVirt Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubevirt.io/api/pool/v1alpha1"
)

// VirtualMachinePoolLister helps list VirtualMachinePools.
// All objects returned here must be treated as read-only.
type VirtualMachinePoolLister interface {
	// List lists all VirtualMachinePools in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VirtualMachinePool, err error)
	// VirtualMachinePools returns an object that can list and get VirtualMachinePools.
	VirtualMachinePools(namespace string) VirtualMachinePoolNamespaceLister
	VirtualMachinePoolListerExpansion
}

// virtualMachinePoolLister implements the VirtualMachinePoolLister interface.
type virtualMachinePoolLister struct {
	indexer cache.Indexer
}

// NewVirtualMachinePoolLister returns a new VirtualMachinePoolLister.
func NewVirtualMachinePoolLister(indexer cache.Indexer) VirtualMachinePoolLister {
	return &virtualMachinePoolLister{indexer: indexer}
}

// List lists all VirtualMachinePools in the indexer.
func (s *virtualMachinePoolLister) List(selector labels.Selector) (ret []*v1alpha1.VirtualMachinePool, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VirtualMachinePool))
	})
	return ret, err
}

// VirtualMachinePools returns an object that can list and get VirtualMachinePools.
func (s *virtualMachinePoolLister) VirtualMachinePools(namespace string) VirtualMachinePoolNamespaceLister {
	return virtualMachinePoolNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VirtualMachinePoolNamespaceLister helps list and get VirtualMachinePools.
// All objects returned here must be treated as read-only.
type VirtualMachinePoolNamespaceLister interface {
	// List lists all VirtualMachinePools in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VirtualMachinePool, err error)
	// Get retrieves the VirtualMachinePool from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.VirtualMachinePool, error)
	VirtualMachinePoolNamespaceListerExpansion
}

// virtualMachinePoolNamespaceLister implements the VirtualMachinePoolNamespaceLister
// interface.
type virtualMachinePoolNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VirtualMachinePools in the indexer for a given namespace.
func (s virtualMachinePoolNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VirtualMachinePool, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VirtualMachinePool))
	})
	return ret, err
}

// Get retrieves the VirtualMachinePool from the indexer for a given namespace and name.
func (s virtualMachinePoolNamespaceLister) Get(name string) (*v1alpha1.VirtualMachinePool, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("virtualmachinepool"), name)
	}
	return obj.(*v1alpha1.VirtualMachinePool), nil
}
