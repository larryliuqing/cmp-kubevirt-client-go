/*
Copyright 2023 The KubeVirt Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1 "kubevirt.io/api/core/v1"
)

// VirtualMachineInstanceLister helps list VirtualMachineInstances.
// All objects returned here must be treated as read-only.
type VirtualMachineInstanceLister interface {
	// List lists all VirtualMachineInstances in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.VirtualMachineInstance, err error)
	// VirtualMachineInstances returns an object that can list and get VirtualMachineInstances.
	VirtualMachineInstances(namespace string) VirtualMachineInstanceNamespaceLister
	VirtualMachineInstanceListerExpansion
}

// virtualMachineInstanceLister implements the VirtualMachineInstanceLister interface.
type virtualMachineInstanceLister struct {
	indexer cache.Indexer
}

// NewVirtualMachineInstanceLister returns a new VirtualMachineInstanceLister.
func NewVirtualMachineInstanceLister(indexer cache.Indexer) VirtualMachineInstanceLister {
	return &virtualMachineInstanceLister{indexer: indexer}
}

// List lists all VirtualMachineInstances in the indexer.
func (s *virtualMachineInstanceLister) List(selector labels.Selector) (ret []*v1.VirtualMachineInstance, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.VirtualMachineInstance))
	})
	return ret, err
}

// VirtualMachineInstances returns an object that can list and get VirtualMachineInstances.
func (s *virtualMachineInstanceLister) VirtualMachineInstances(namespace string) VirtualMachineInstanceNamespaceLister {
	return virtualMachineInstanceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VirtualMachineInstanceNamespaceLister helps list and get VirtualMachineInstances.
// All objects returned here must be treated as read-only.
type VirtualMachineInstanceNamespaceLister interface {
	// List lists all VirtualMachineInstances in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.VirtualMachineInstance, err error)
	// Get retrieves the VirtualMachineInstance from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.VirtualMachineInstance, error)
	VirtualMachineInstanceNamespaceListerExpansion
}

// virtualMachineInstanceNamespaceLister implements the VirtualMachineInstanceNamespaceLister
// interface.
type virtualMachineInstanceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VirtualMachineInstances in the indexer for a given namespace.
func (s virtualMachineInstanceNamespaceLister) List(selector labels.Selector) (ret []*v1.VirtualMachineInstance, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.VirtualMachineInstance))
	})
	return ret, err
}

// Get retrieves the VirtualMachineInstance from the indexer for a given namespace and name.
func (s virtualMachineInstanceNamespaceLister) Get(name string) (*v1.VirtualMachineInstance, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("virtualmachineinstance"), name)
	}
	return obj.(*v1.VirtualMachineInstance), nil
}
