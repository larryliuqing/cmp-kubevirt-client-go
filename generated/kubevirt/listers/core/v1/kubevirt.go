/*
Copyright 2023 The KubeVirt Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1 "kubevirt.io/api/core/v1"
)

// KubeVirtLister helps list KubeVirts.
// All objects returned here must be treated as read-only.
type KubeVirtLister interface {
	// List lists all KubeVirts in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.KubeVirt, err error)
	// KubeVirts returns an object that can list and get KubeVirts.
	KubeVirts(namespace string) KubeVirtNamespaceLister
	KubeVirtListerExpansion
}

// kubeVirtLister implements the KubeVirtLister interface.
type kubeVirtLister struct {
	indexer cache.Indexer
}

// NewKubeVirtLister returns a new KubeVirtLister.
func NewKubeVirtLister(indexer cache.Indexer) KubeVirtLister {
	return &kubeVirtLister{indexer: indexer}
}

// List lists all KubeVirts in the indexer.
func (s *kubeVirtLister) List(selector labels.Selector) (ret []*v1.KubeVirt, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.KubeVirt))
	})
	return ret, err
}

// KubeVirts returns an object that can list and get KubeVirts.
func (s *kubeVirtLister) KubeVirts(namespace string) KubeVirtNamespaceLister {
	return kubeVirtNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KubeVirtNamespaceLister helps list and get KubeVirts.
// All objects returned here must be treated as read-only.
type KubeVirtNamespaceLister interface {
	// List lists all KubeVirts in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.KubeVirt, err error)
	// Get retrieves the KubeVirt from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.KubeVirt, error)
	KubeVirtNamespaceListerExpansion
}

// kubeVirtNamespaceLister implements the KubeVirtNamespaceLister
// interface.
type kubeVirtNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all KubeVirts in the indexer for a given namespace.
func (s kubeVirtNamespaceLister) List(selector labels.Selector) (ret []*v1.KubeVirt, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.KubeVirt))
	})
	return ret, err
}

// Get retrieves the KubeVirt from the indexer for a given namespace and name.
func (s kubeVirtNamespaceLister) Get(name string) (*v1.KubeVirt, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("kubevirt"), name)
	}
	return obj.(*v1.KubeVirt), nil
}
