/*
Copyright 2023 The KubeVirt Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubevirt.io/api/export/v1alpha1"
)

// VirtualMachineExportLister helps list VirtualMachineExports.
// All objects returned here must be treated as read-only.
type VirtualMachineExportLister interface {
	// List lists all VirtualMachineExports in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VirtualMachineExport, err error)
	// VirtualMachineExports returns an object that can list and get VirtualMachineExports.
	VirtualMachineExports(namespace string) VirtualMachineExportNamespaceLister
	VirtualMachineExportListerExpansion
}

// virtualMachineExportLister implements the VirtualMachineExportLister interface.
type virtualMachineExportLister struct {
	indexer cache.Indexer
}

// NewVirtualMachineExportLister returns a new VirtualMachineExportLister.
func NewVirtualMachineExportLister(indexer cache.Indexer) VirtualMachineExportLister {
	return &virtualMachineExportLister{indexer: indexer}
}

// List lists all VirtualMachineExports in the indexer.
func (s *virtualMachineExportLister) List(selector labels.Selector) (ret []*v1alpha1.VirtualMachineExport, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VirtualMachineExport))
	})
	return ret, err
}

// VirtualMachineExports returns an object that can list and get VirtualMachineExports.
func (s *virtualMachineExportLister) VirtualMachineExports(namespace string) VirtualMachineExportNamespaceLister {
	return virtualMachineExportNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VirtualMachineExportNamespaceLister helps list and get VirtualMachineExports.
// All objects returned here must be treated as read-only.
type VirtualMachineExportNamespaceLister interface {
	// List lists all VirtualMachineExports in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VirtualMachineExport, err error)
	// Get retrieves the VirtualMachineExport from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.VirtualMachineExport, error)
	VirtualMachineExportNamespaceListerExpansion
}

// virtualMachineExportNamespaceLister implements the VirtualMachineExportNamespaceLister
// interface.
type virtualMachineExportNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VirtualMachineExports in the indexer for a given namespace.
func (s virtualMachineExportNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VirtualMachineExport, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VirtualMachineExport))
	})
	return ret, err
}

// Get retrieves the VirtualMachineExport from the indexer for a given namespace and name.
func (s virtualMachineExportNamespaceLister) Get(name string) (*v1alpha1.VirtualMachineExport, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("virtualmachineexport"), name)
	}
	return obj.(*v1alpha1.VirtualMachineExport), nil
}
