/*
Copyright 2023 The KubeVirt Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubevirt.io/api/snapshot/v1alpha1"
)

// VirtualMachineSnapshotLister helps list VirtualMachineSnapshots.
// All objects returned here must be treated as read-only.
type VirtualMachineSnapshotLister interface {
	// List lists all VirtualMachineSnapshots in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VirtualMachineSnapshot, err error)
	// VirtualMachineSnapshots returns an object that can list and get VirtualMachineSnapshots.
	VirtualMachineSnapshots(namespace string) VirtualMachineSnapshotNamespaceLister
	VirtualMachineSnapshotListerExpansion
}

// virtualMachineSnapshotLister implements the VirtualMachineSnapshotLister interface.
type virtualMachineSnapshotLister struct {
	indexer cache.Indexer
}

// NewVirtualMachineSnapshotLister returns a new VirtualMachineSnapshotLister.
func NewVirtualMachineSnapshotLister(indexer cache.Indexer) VirtualMachineSnapshotLister {
	return &virtualMachineSnapshotLister{indexer: indexer}
}

// List lists all VirtualMachineSnapshots in the indexer.
func (s *virtualMachineSnapshotLister) List(selector labels.Selector) (ret []*v1alpha1.VirtualMachineSnapshot, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VirtualMachineSnapshot))
	})
	return ret, err
}

// VirtualMachineSnapshots returns an object that can list and get VirtualMachineSnapshots.
func (s *virtualMachineSnapshotLister) VirtualMachineSnapshots(namespace string) VirtualMachineSnapshotNamespaceLister {
	return virtualMachineSnapshotNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VirtualMachineSnapshotNamespaceLister helps list and get VirtualMachineSnapshots.
// All objects returned here must be treated as read-only.
type VirtualMachineSnapshotNamespaceLister interface {
	// List lists all VirtualMachineSnapshots in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VirtualMachineSnapshot, err error)
	// Get retrieves the VirtualMachineSnapshot from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.VirtualMachineSnapshot, error)
	VirtualMachineSnapshotNamespaceListerExpansion
}

// virtualMachineSnapshotNamespaceLister implements the VirtualMachineSnapshotNamespaceLister
// interface.
type virtualMachineSnapshotNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VirtualMachineSnapshots in the indexer for a given namespace.
func (s virtualMachineSnapshotNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VirtualMachineSnapshot, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VirtualMachineSnapshot))
	})
	return ret, err
}

// Get retrieves the VirtualMachineSnapshot from the indexer for a given namespace and name.
func (s virtualMachineSnapshotNamespaceLister) Get(name string) (*v1alpha1.VirtualMachineSnapshot, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("virtualmachinesnapshot"), name)
	}
	return obj.(*v1alpha1.VirtualMachineSnapshot), nil
}
