/*
Copyright 2023 The KubeVirt Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubevirt.io/api/snapshot/v1alpha1"
)

// VirtualMachineSnapshotContentLister helps list VirtualMachineSnapshotContents.
// All objects returned here must be treated as read-only.
type VirtualMachineSnapshotContentLister interface {
	// List lists all VirtualMachineSnapshotContents in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VirtualMachineSnapshotContent, err error)
	// VirtualMachineSnapshotContents returns an object that can list and get VirtualMachineSnapshotContents.
	VirtualMachineSnapshotContents(namespace string) VirtualMachineSnapshotContentNamespaceLister
	VirtualMachineSnapshotContentListerExpansion
}

// virtualMachineSnapshotContentLister implements the VirtualMachineSnapshotContentLister interface.
type virtualMachineSnapshotContentLister struct {
	indexer cache.Indexer
}

// NewVirtualMachineSnapshotContentLister returns a new VirtualMachineSnapshotContentLister.
func NewVirtualMachineSnapshotContentLister(indexer cache.Indexer) VirtualMachineSnapshotContentLister {
	return &virtualMachineSnapshotContentLister{indexer: indexer}
}

// List lists all VirtualMachineSnapshotContents in the indexer.
func (s *virtualMachineSnapshotContentLister) List(selector labels.Selector) (ret []*v1alpha1.VirtualMachineSnapshotContent, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VirtualMachineSnapshotContent))
	})
	return ret, err
}

// VirtualMachineSnapshotContents returns an object that can list and get VirtualMachineSnapshotContents.
func (s *virtualMachineSnapshotContentLister) VirtualMachineSnapshotContents(namespace string) VirtualMachineSnapshotContentNamespaceLister {
	return virtualMachineSnapshotContentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VirtualMachineSnapshotContentNamespaceLister helps list and get VirtualMachineSnapshotContents.
// All objects returned here must be treated as read-only.
type VirtualMachineSnapshotContentNamespaceLister interface {
	// List lists all VirtualMachineSnapshotContents in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VirtualMachineSnapshotContent, err error)
	// Get retrieves the VirtualMachineSnapshotContent from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.VirtualMachineSnapshotContent, error)
	VirtualMachineSnapshotContentNamespaceListerExpansion
}

// virtualMachineSnapshotContentNamespaceLister implements the VirtualMachineSnapshotContentNamespaceLister
// interface.
type virtualMachineSnapshotContentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VirtualMachineSnapshotContents in the indexer for a given namespace.
func (s virtualMachineSnapshotContentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VirtualMachineSnapshotContent, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VirtualMachineSnapshotContent))
	})
	return ret, err
}

// Get retrieves the VirtualMachineSnapshotContent from the indexer for a given namespace and name.
func (s virtualMachineSnapshotContentNamespaceLister) Get(name string) (*v1alpha1.VirtualMachineSnapshotContent, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("virtualmachinesnapshotcontent"), name)
	}
	return obj.(*v1alpha1.VirtualMachineSnapshotContent), nil
}
